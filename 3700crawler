#!/usr/bin/env python3

import argparse, socket, ssl

DEFAULT_SERVER = "proj5.3700.network"
DEFAULT_PORT = 443

class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password
        self.session_id = ''
        self.csrf_token = ''
        self.post_request = ''
        self.mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.mysocket.connect((self.server, self.port))
        self.context = ssl.create_default_context()
        self.wrapped_socket = self.context.wrap_socket(self.mysocket, server_hostname=self.server)

    def reset_connection(self):
        self.mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.mysocket.connect((self.server, self.port))
        self.wrapped_socket = self.context.wrap_socket(self.mysocket, server_hostname=self.server)

    def get_redirect_url(self, data):
        print(data)
        new_url = 'https://'+str(self.server)+':'+str(self.port)
        extracted_url_start = data.index('Location:') + 10
        extracted_url_end = data.index('\n', extracted_url_start)-1
        extracted_url = data[extracted_url_start:extracted_url_end]
        print("extracted url is : " + extracted_url)
        new_url += extracted_url
        print("new url is : " + new_url)
        print(len(extracted_url))
        return new_url

    def handle_302(self, data):
        new_url = self.get_redirect_url(data)
        return self.send_get_request(new_url)

    def get_status_code(self, data):
        return data[:data.index('\n')]

    def send_get_request(self, url):
        self.reset_connection()
        request = 'GET ' + url + ' HTTP/1.0 \r\n\r\n'

        print("Request to %s:%d" % (self.server, self.port))
        print(request)

        self.wrapped_socket.send(request.encode('ascii'))
        data = self.wrapped_socket.recv(10000).decode('ascii')
        status_code = self.get_status_code(data)

        if 'HTTP/1.1 200 OK' in status_code:
            print("we made it")
            return data
        elif 'HTTP/1.1 302 Found' in status_code:
            return self.handle_302(data)

    def get_session_info(self):
        request = "GET https://"+str(self.server)+":"+str(self.port)+"/accounts/login/?next=/fakebook/ HTTP/1.0 \r\n\r\n" 
        print("request to %s:%d" % (self.server, self.port))
        print(request)
        self.wrapped_socket.send(request.encode('ascii'))
        data = self.wrapped_socket.recv(10000)
        data_string = data.decode('ascii')
        self.get_status_code(data_string)
        session_id_start = data_string.index('sessionid') + 10
        session_id_end = data_string.index(';', session_id_start)
        csrf_start = data_string.index('csrftoken') + 10
        csrf_end = data_string.index(';', csrf_start)
        self.csrf_token = data_string[csrf_start:csrf_end]
        self.session_id = data_string[session_id_start:session_id_end]
        print("session id is: " + str(self.session_id))
        print("csrf token is: " + str(self.csrf_token))
        print("Response:\n%s" % data.decode('ascii'))


    def login(self):
        self.get_session_info()

        self.mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.mysocket.connect((self.server, self.port))
        self.wrapped_socket = self.context.wrap_socket(self.mysocket, server_hostname=self.server)

        post_request = 'POST https://'+str(self.server)+':'+str(self.port)+'/accounts/login/?next=/fakebook/ HTTP/1.0 '
        post_request += 'cookie:'+str(self.csrf_token)+'; sessionid='+str(self.session_id)+' '
        post_request += 'cookie:'+str(self.csrf_token)
        post_request += 'content-type:application/x-www-form-url-encoded '
        post_request += 'content-length:20 '
        post_request += '\r\n\r\n'
        #post_request += 'username='+str(self.username)+'&password='+str(self.password)
        post_request += 'username='+str(self.username)+'&password='+str(self.password)+'&csrfmiddlewaretoken='+str(self.csrf_token)

        print("post request to %s:%d" % (self.server, self.port))
        print(post_request)

        self.wrapped_socket.send(post_request.encode('ascii'))
        data = self.wrapped_socket.recv(1000).decode('ascii')
        print("Response from post:\n%s" % data)

        
        return 0


    def run(self):
        #self.login()
        request = 'https://'+str(self.server)+':'+str(self.port)+"/fakebook/"
        data = self.send_get_request(request)
        #print("request to %s:%d" % (self.server, self.port))
        #print(request)
        #self.wrapped_socket.send(request.encode('ascii'))
        #data = self.wrapped_socket.recv(10000)
        #data_string = data.decode('ascii')
        print("Response:\n%s" % data)




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()
